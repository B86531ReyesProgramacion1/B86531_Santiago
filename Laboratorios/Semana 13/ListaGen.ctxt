#BlueJ class context
comment0.target=ListaGen
comment0.text=\r\n\ Clase\ para\ la\ representacion\ de\ listas\ enlazadas\ con\ nodos\ genericos\r\n\ @author\tProgramacion\ I\r\n\ @version\t2019/Nov/05\r\n\ \r\n
comment1.params=
comment1.target=ListaGen()
comment1.text=\r\n\ \ Constructor\ de\ la\ clase\r\n\ \ Crea\ una\ lista\ vacia\r\n
comment10.params=
comment10.target=java.lang.String\ toString()
comment10.text=\r\n\ \ Convierte\ la\ lista\ en\ una\ tira\ de\ caracteres\r\n
comment11.params=
comment11.target=java.lang.String\ toStringRec()
comment11.text=\r\n\r\n
comment12.params=voy
comment12.target=java.lang.StringBuffer\ toStringRec(NodoGen)
comment12.text=\r\n\r\n
comment13.params=voy
comment13.target=void\ printRec(NodoGen)
comment13.text=\r\n\ \ Despliega\ la\ lista\ de\ manera\ recursiva\r\n\ @param\tNodo\ por\ el\ que\ vamos\ desplegando\r\n
comment14.params=args
comment14.target=void\ main(java.lang.String[])
comment14.text=\r\n\ \ Metodo\ para\ realizar\ las\ pruebas\ de\ la\ clase\r\n
comment2.params=
comment2.target=NodoGen\ getInicio()
comment2.text=\r\n\ \ Devuelve\ el\ inicio\ de\ la\ lista\r\n
comment3.params=valor
comment3.target=void\ agregar(java.lang.Comparable)
comment3.text=\r\n\ \ Agrega\ un\ nuevo\ nodo\ en\ la\ lista\r\n\ \ No\ toma\ en\ cuenta\ el\ orden,\ ni\ si\ ya\ existe\r\n\ @param\tT\ valor\ del\ nuevo\ nodo\ a\ agregar\r\n
comment4.params=valor
comment4.target=void\ agregarOrdenado(java.lang.Comparable)
comment4.text=\r\n\ \ Agrega\ un\ nuevo\ nodo\ en\ la\ lista\r\n\ \ Toma\ en\ cuenta\ el\ orden\ de\ los\ elementos\ para\ agregarlo\r\n\ \ Permite\ la\ insercion\ de\ repetidos\r\n\ @param\ \tint\tvalor\ a\ insertar\r\n
comment5.params=valores
comment5.target=void\ agregarOrdenado(java.lang.Comparable[])
comment5.text=\r\n\ \ Agrega\ un\ vector\ de\ valores\ en\ la\ lista\r\n\ \ Permite\ repetidos\r\n\ \ @param\tT[]\ valores\ a\ insertar\r\n
comment6.params=valor
comment6.target=void\ agregarOrdenadoRecursivo(java.lang.Comparable)
comment6.text=\r\n\ \ Agregar\ un\ nodo\ a\ la\ lista\ de\ manera\ recursiva\r\n\ \ Permite\ repetidos\r\n\ @param\tint\ valor\ a\ agregar\r\n
comment7.params=donde\ valor
comment7.target=NodoGen\ agregarOrdenadoRecursivo(NodoGen,\ java.lang.Comparable)
comment7.text=\r\n\ \ Agrega\ un\ nuevo\ nodo\ a\ la\ lista\ de\ manera\ recursiva\r\n\ @param\tNodo\ donde\ queremos\ agregar\ el\ nodo\r\n\ @param\tint\ valor\ del\ nuevo\ nodo\ a\ agregar\r\n
comment8.params=valor
comment8.target=void\ eliminarRecursivo(java.lang.Comparable)
comment8.text=\r\n\ \ Elimina\ un\ elemento\ de\ la\ lista\ de\ manera\ recursiva\r\n\ @param\tint\ elemento\ a\ eliminar\r\n
comment9.params=voy\ valor
comment9.target=NodoGen\ eliminarRecursivo(NodoGen,\ java.lang.Comparable)
comment9.text=\r\n\ \ Recorre\ la\ lista\ de\ manera\ recursiva\ para\ eliminar\ el\ elemento\ indicado\r\n\ @param\tint\ elemento\ a\ eliminar\r\n\ @return\tNodo\ indicador\ del\ siguiente\ elemento\ de\ la\ lista\r\n
numComments=15
